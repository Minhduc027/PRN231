// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KFM.Data.Models;

public partial class FA24_SE1720_PRN231_G4_KFMContext : DbContext
{
    public FA24_SE1720_PRN231_G4_KFMContext()
    {
    }

    public FA24_SE1720_PRN231_G4_KFMContext(DbContextOptions<FA24_SE1720_PRN231_G4_KFMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<FoodRequirement> FoodRequirements { get; set; }

    public virtual DbSet<KoiFish> KoiFishes { get; set; }

    public virtual DbSet<KoiGrowth> KoiGrowths { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Pond> Ponds { get; set; }

    public virtual DbSet<SaltRequirement> SaltRequirements { get; set; }

    public virtual DbSet<WaterParameter> WaterParameters { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));
    /*protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=MAY-CAY-101;Initial Catalog=FA24_SE1720_PRN231_G4_KFM;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");*/

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<FoodRequirement>(entity =>
        {
            entity.HasKey(e => e.FoodId).HasName("PK__FoodRequ__856DB3CB586750C9");

            entity.Property(e => e.FoodId).HasColumnName("FoodID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DevelopmentStage).HasMaxLength(50);
            entity.Property(e => e.KoiId).HasColumnName("KoiID");

            entity.HasOne(d => d.Koi).WithMany(p => p.FoodRequirements)
                .HasForeignKey(d => d.KoiId)
                .HasConstraintName("FK__FoodRequi__KoiID__4F7CD00D");
        });

        modelBuilder.Entity<KoiFish>(entity =>
        {
            entity.HasKey(e => e.KoiId).HasName("PK__KoiFish__E03435B8B29A5612");

            entity.ToTable("KoiFish");

            entity.Property(e => e.KoiId).HasColumnName("KoiID");
            entity.Property(e => e.BodyShape).HasMaxLength(50);
            entity.Property(e => e.Breed).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.Image).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Origin).HasMaxLength(100);
            entity.Property(e => e.PondId).HasColumnName("PondID");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Pond).WithMany(p => p.KoiFishes)
                .HasForeignKey(d => d.PondId)
                .HasConstraintName("FK__KoiFish__PondID__5070F446");
        });

        modelBuilder.Entity<KoiGrowth>(entity =>
        {
            entity.HasKey(e => e.GrowthId).HasName("PK__KoiGrowt__7F859E9F7DC85F8E");

            entity.ToTable("KoiGrowth");

            entity.Property(e => e.GrowthId).HasColumnName("GrowthID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.KoiId).HasColumnName("KoiID");

            entity.HasOne(d => d.Koi).WithMany(p => p.KoiGrowths)
                .HasForeignKey(d => d.KoiId)
                .HasConstraintName("FK__KoiGrowth__KoiID__5165187F");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.NewsId).HasName("PK__News__954EBDD36211526A");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.Author).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BAFD3D45ECD");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ProductName).HasMaxLength(100);
            entity.Property(e => e.TotalPrice)
                .HasComputedColumnSql("([Quantity]*[Price])", false)
                .HasColumnType("decimal(21, 2)");
        });

        modelBuilder.Entity<Pond>(entity =>
        {
            entity.HasKey(e => e.PondId).HasName("PK__Ponds__D18BF8549E39D037");

            entity.Property(e => e.PondId).HasColumnName("PondID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Image).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<SaltRequirement>(entity =>
        {
            entity.HasKey(e => e.SaltId).HasName("PK__SaltRequ__036055F3C9043809");

            entity.Property(e => e.SaltId).HasColumnName("SaltID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PondId).HasColumnName("PondID");

            entity.HasOne(d => d.Pond).WithMany(p => p.SaltRequirements)
                .HasForeignKey(d => d.PondId)
                .HasConstraintName("FK__SaltRequi__PondI__52593CB8");
        });

        modelBuilder.Entity<WaterParameter>(entity =>
        {
            entity.HasKey(e => e.ParameterId).HasName("PK__WaterPar__F80C62978C1D9FE4");

            entity.Property(e => e.ParameterId).HasColumnName("ParameterID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.No2level).HasColumnName("NO2Level");
            entity.Property(e => e.No3level).HasColumnName("NO3Level");
            entity.Property(e => e.O2level).HasColumnName("O2Level");
            entity.Property(e => e.Phlevel).HasColumnName("PHLevel");
            entity.Property(e => e.Po4level).HasColumnName("PO4Level");
            entity.Property(e => e.PondId).HasColumnName("PondID");

            entity.HasOne(d => d.Pond).WithMany(p => p.WaterParameters)
                .HasForeignKey(d => d.PondId)
                .HasConstraintName("FK__WaterPara__PondI__534D60F1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}